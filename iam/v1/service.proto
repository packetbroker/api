// Copyright Â© 2020 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package org.packetbroker.iam.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "packetbroker/api/v3/contact.proto";
import "packetbroker/api/v3/network.proto";

option go_package = "go.packetbroker.org/api/iam;iampb";

message DevAddrBlocksValue {
  repeated org.packetbroker.v3.DevAddrBlock value = 1;
}

message ListNetworksRequest {
  // Number of items to skip.
  uint32 offset = 1;
  // Limit the number of items.
  // If 0, use the server's default.
  // The actual limit may be capped by the server.
  uint32 limit = 2;
  // Filter networks by name.
  string name_contains = 3;
}

message ListNetworksResponse {
  repeated org.packetbroker.v3.Network networks = 1;
  // Total number of networks.
  uint32 total = 2;
}

message CreateNetworkRequest {
  org.packetbroker.v3.Network network = 1;
}

message CreateNetworkResponse {
  org.packetbroker.v3.Network network = 1;
}

message GetNetworkResponse {
  org.packetbroker.v3.Network network = 1;
}

message NetworkRequest {
  uint32 net_id = 1;
}

message UpdateNetworkRequest {
  // LoRa Alliance NetID of the Member.
  uint32 net_id = 1;
  // Name of the tenant.
  // This field gets updated when a value is set.
  google.protobuf.StringValue name = 2;
  // DevAddr blocks of the tenant.
  // This field gets updated when a value is set.
  DevAddrBlocksValue dev_addr_blocks = 3;
  // Administrative contact.
  // This field gets updated when a value is set.
  org.packetbroker.v3.ContactInfoValue administrative_contact = 4;
  // Technical contact.
  // This field gets updated when a value is set.
  org.packetbroker.v3.ContactInfoValue technical_contact = 5;
  // Indicates whether the network is listed in the catalog.
  // This field gets updated when a value is set.
  google.protobuf.BoolValue listed = 6;
  // Delegated network.
  // This field gets updated when a value is set.
  message DelegatedNetID {
    google.protobuf.UInt32Value value = 1;
  }
  DelegatedNetID delegated_net_id = 8;

  reserved 7; // Deprecated: target;
}

message UpdateNetworkListedRequest {
  uint32 net_id = 1;
  // Indicates whether the network is listed in the catalog.
  bool listed = 2;
}

service NetworkRegistry {
  // List networks.
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);
  // Create a network.
  rpc CreateNetwork(CreateNetworkRequest) returns (CreateNetworkResponse);
  // Get a network.
  rpc GetNetwork(NetworkRequest) returns (GetNetworkResponse);
  // Update a network.
  rpc UpdateNetwork(UpdateNetworkRequest) returns (google.protobuf.Empty);
  // Update the listed state of a network.
  rpc UpdateNetworkListed(UpdateNetworkListedRequest) returns (google.protobuf.Empty);
  // Delete a network.
  rpc DeleteNetwork(NetworkRequest) returns (google.protobuf.Empty);
}

message ListTenantsRequest {
  uint32 net_id = 1;
  // Number of items to skip.
  uint32 offset = 2;
  // Limit the number of items.
  // If 0, use the server's default.
  // The actual limit may be capped by the server.
  uint32 limit = 3;
  // Filter tenants by ID.
  string tenant_id_contains = 4;
  // Filter networks by name.
  string name_contains = 5;
}

message ListTenantsResponse {
  repeated org.packetbroker.v3.Tenant tenants = 1;
  // Total number of tenants.
  uint32 total = 2;
}

message CreateTenantRequest {
  org.packetbroker.v3.Tenant tenant = 1;
}

message CreateTenantResponse {
  org.packetbroker.v3.Tenant tenant = 1;
}

message TenantRequest {
  // LoRa Alliance NetID of the Member.
  uint32 net_id = 1;
  // ID assigned by the Member.
  string tenant_id = 2;
}

message GetTenantResponse {
  org.packetbroker.v3.Tenant tenant = 1;
}

message UpdateTenantRequest {
  // LoRa Alliance NetID of the Member.
  uint32 net_id = 1;
  // ID assigned by the Member.
  string tenant_id = 2;
  // Name of the tenant.
  // This field gets updated when a value is set.
  google.protobuf.StringValue name = 3;
  // DevAddr blocks of the tenant.
  // This field gets updated when a value is set.
  DevAddrBlocksValue dev_addr_blocks = 4;
  // Administrative contact.
  // This field gets updated when a value is set.
  org.packetbroker.v3.ContactInfoValue administrative_contact = 5;
  // Technical contact.
  // This field gets updated when a value is set.
  org.packetbroker.v3.ContactInfoValue technical_contact = 6;
  // Indicates whether the tenant is listed in the catalog.
  // This field gets updated when a value is set.
  google.protobuf.BoolValue listed = 7;

  reserved 8; // Deprecated: target;
}

message UpdateTenantListedRequest {
  // LoRa Alliance NetID of the Member.
  uint32 net_id = 1;
  // ID assigned by the Member.
  string tenant_id = 2;
  // Indicates whether the tenant is listed in the catalog.
  bool listed = 3;
}

service TenantRegistry {
  // List a network's tenants.
  rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse);
  // Create a tenant.
  rpc CreateTenant(CreateTenantRequest) returns (CreateTenantResponse);
  // Get a tenant.
  rpc GetTenant(TenantRequest) returns (GetTenantResponse);
  // Update a tenant.
  rpc UpdateTenant(UpdateTenantRequest) returns (google.protobuf.Empty);
  // Update the listed state of a tenant.
  rpc UpdateTenantListed(UpdateTenantListedRequest) returns (google.protobuf.Empty);
  // Delete a tenant.
  rpc DeleteTenant(TenantRequest) returns (google.protobuf.Empty);
}

message ListAPIKeysRequest {
  // LoRa Alliance NetID of the Member.
  uint32 net_id = 1;
  // ID assigned by the Member (optional).
  string tenant_id = 2;
  // Cluster of the Member (optional).
  string cluster_id = 3;
}

message ListAPIKeysResponse {
  repeated org.packetbroker.v3.NetworkAPIKey keys = 1;
}

message CreateAPIKeyRequest {
  // LoRa Alliance NetID of the Member.
  uint32 net_id = 1;
  // ID assigned by the Member (optional).
  string tenant_id = 2;
  // Cluster of the Member (optional).
  string cluster_id = 3;
}

message APIKeyRequest {
  string key_id = 1;
}

message CreateAPIKeyResponse {
  org.packetbroker.v3.NetworkAPIKey key = 1;
}

service APIKeyVault {
  // List API keys.
  rpc ListAPIKeys(ListAPIKeysRequest) returns (ListAPIKeysResponse);
  // Create an API key.
  rpc CreateAPIKey(CreateAPIKeyRequest) returns (CreateAPIKeyResponse);
  // Delete an API key.
  rpc DeleteAPIKey(APIKeyRequest) returns (google.protobuf.Empty);
}
