// Copyright Â© 2020 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package org.packetbroker.v3;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "packetbroker/api/v3/enums.proto";
import "packetbroker/api/v3/messages.proto";
import "packetbroker/api/v3/networks.proto";

option go_package = "go.packetbroker.org/api/v3;packetbroker";

message DevAddrPrefixRoute {
  // Prefix of the route.
  DevAddrPrefix prefix = 1;
  // LoRa Alliance NetID of the Member.
  uint32 net_id = 2;
  // Tenant ID assigned by the Member (optional).
  string tenant_id = 3;
  // Timestamp when the route was created.
  google.protobuf.Timestamp created_at = 4;
  // Cluster of the Home Network Member (optional).
  string home_network_cluster_id = 5;
  // Target information (optional).
  Target target = 6;
}

// Routing policy between a Forwarder and a Home Network.
message RoutingPolicy {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 2;
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 3;
  // Tenant ID managed by the Home Network Member.
  string home_network_tenant_id = 4;
  // Timestamp when the policy got last updated.
  google.protobuf.Timestamp updated_at = 7;

  message Uplink {
    // Forward join-request messages.
    bool join_request = 1;
    // Forward uplink messages with FPort of 0.
    bool mac_data = 2;
    // Forward uplink messages with FPort between 1 and 255.
    bool application_data = 3;
    // Forward RSSI and SNR.
    bool signal_quality = 4;
    // Forward gateway location, RSSI, SNR and fine timestamp.
    bool localization = 5;
  }
  // Uplink policy.
  Uplink uplink = 5;

  message Downlink {
    // Allow join-accept messages.
    bool join_accept = 1;
    // Allow downlink messages with FPort of 0.
    bool mac_data = 2;
    // Allow downlink messages with FPort between 1 and 255.
    bool application_data = 3;
  }
  // Downlink policy.
  Downlink downlink = 6;
}

// Filter for Home Networks to subscribe to forwarded messages.
message RoutingFilter {
  reserved 1; // Deprecated forwarder_whitelist;
  reserved 2; // Deprecated forwarder_blacklist;

  message JoinRequest {
    message EUIPrefixes {
      fixed64 join_eui = 1;
      // Significant bits of join_eui.
      uint32 join_eui_length = 2;
      fixed64 dev_eui = 3;
      // Significant bits of dev_eui.
      uint32 dev_eui_length = 4;
    }
    // Pass join-request EUIs by prefix. If empty, allow all join-requests.
    repeated EUIPrefixes eui_prefixes = 1;
  }

  message MACPayload {
    // Pass (un)confirmed uplink data messages.
    google.protobuf.BoolValue confirmed = 1;

    // Pass DevAddrs by prefix. If empty, allow all DevAddrs.
    repeated DevAddrPrefix dev_addr_prefixes = 2;

    // Pass messages with or without FOpts.
    google.protobuf.BoolValue f_opts = 3;

    message FPortRange {
      // Inclusive start value of the range.
      uint32 low = 1;
      // Inclusive end value of the range.
      uint32 high = 2;
    }
    // Pass for FPort ranges. If empty, allow all FPorts.
    repeated FPortRange f_port_ranges = 4;
  }

  oneof message {
    JoinRequest join_request = 3;
    MACPayload mac = 4;
  }

  // Pass gateway metadata. If not set, pass gateway metadata if available.
  google.protobuf.BoolValue gateway_metadata = 5;
}

message RouteHop {
  // Time when the server received the message.
  google.protobuf.Timestamp received_at = 1;
  // Sender of the message, typically the authorized client identifier.
  string sender_name = 2;
  // Sender IP address or host name.
  string sender_address = 3;
  // Receiver of the message.
  string receiver_name = 4;
  // Receiver agent.
  string receiver_agent = 5;
}

// Uplink message routed from a Forwarder to a Home Network.
message RoutedUplinkMessage {
  // Time when the server routed the message.
  google.protobuf.Timestamp time = 10;
  // Message identifier generated by the Router.
  string id = 1;
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 2;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 3;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 4;
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 5;
  // Home Network cluster of the Home Network Member.
  string home_network_cluster_id = 9;
  // Tenant ID managed by the Home Network Member.
  // This value is empty if it cannot be determined by the Router.
  string home_network_tenant_id = 6;
  // Uplink message.
  UplinkMessage message = 7;
  // Hops that the message passed. Each Router appends an entry.
  repeated RouteHop hops = 8;
}

// Downlink message routed from a Home Network to a Forwarder.
message RoutedDownlinkMessage {
  // Time when the server routed the message.
  google.protobuf.Timestamp time = 10;
  // Message identifier generated by the Router.
  string id = 1;
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 2;
  // Home Network cluster of the Home Network Member.
  string home_network_cluster_id = 9;
  // Tenant ID managed by the Home Network Member.
  string home_network_tenant_id = 3;
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 4;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 5;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 6;
  // Downlink message.
  DownlinkMessage message = 7;
  // Hops that the message passed. Each Router appends an entry.
  repeated RouteHop hops = 8;
}

message UplinkMessageProcessingErrorValue {
  UplinkMessageProcessingError value = 1;
}

message UplinkMessageDeliveryStateChange {
  // Time when the server changed the state of the message.
  google.protobuf.Timestamp time = 11;
  // Message identifier generated by the Router.
  string id = 1;
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 2;
  // Home Network cluster of the Home Network Member.
  string home_network_cluster_id = 3;
  // Tenant ID managed by the Home Network Member.
  string home_network_tenant_id = 4;
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 5;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 6;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 7;
  // Forwarder uplink token. This value must be copied from the UplinkMessage.
  bytes forwarder_uplink_token = 8;
  // New delivery state of the message.
  MessageDeliveryState state = 9;
  // Any error.
  UplinkMessageProcessingErrorValue error = 10;
}

message DownlinkMessageDeliveryStateChange {
  // Time when the server changed the state of the message.
  google.protobuf.Timestamp time = 12;
  // Message identifier generated by the Router.
  string id = 1;
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 2;
  // Home Network cluster of the Home Network Member.
  string home_network_cluster_id = 3;
  // Tenant ID managed by the Home Network Member.
  string home_network_tenant_id = 4;
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 5;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 6;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 7;
  // Downlink token. This value must be copied from the DownlinkMessage.
  bytes downlink_token = 8;
  // New delivery state of the message.
  MessageDeliveryState state = 9;

  message TransmissionResult {
    // Whether RX1 was used for transmission.
    bool rx1 = 1;
    // Whether RX2 was used for transmission.
    bool rx2 = 2;
  }
  oneof result {
    // Any error.
    DownlinkMessageProcessingError error = 10;
    // Transmission result.
    TransmissionResult success = 11;
  }
}
