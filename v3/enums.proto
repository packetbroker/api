// Copyright Â© 2020 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package org.packetbroker.v3;

option go_package = "go.packetbroker.org/api/v3;packetbroker";

// LoRaWAN region as defined in Regional Parameters.
enum Region {
  UNKNOWN_REGION = 0;
  EU_863_870 = 1;
  US_902_928 = 2;
  CN_779_787 = 3;
  EU_433 = 4;
  AU_915_928 = 5;
  CN_470_510 = 6;
  // CN470-510 20 MHz antenna, type A
  CN_470_510_20_A = 16;
  // CN470-510 20 MHz antenna, type B
  CN_470_510_20_B = 17;
  // CN470-510 26 MHz antenna, type A
  CN_470_510_26_A = 18;
  // CN470-510 26 MHz antenna, type B
  CN_470_510_26_B = 19;
  AS_923 = 7;
  reserved 11; // Deprecated: AS_923_1
  // AS923 group 2
  AS_923_2 = 12;
  // AS923 group 3
  AS_923_3 = 13;
  // AS923 group 4
  AS_923_4 = 15;
  KR_920_923 = 8;
  IN_865_867 = 9;
  RU_864_870 = 10;
  // LoRa 2.4 GHz
  WW_2G4 = 14;
}

// LoRaWAN class for transmitting downlink.
enum DownlinkMessageClass {
  CLASS_A = 0;
  CLASS_B = 1;
  CLASS_C = 2;
}

// Priority of a downlink message.
enum DownlinkMessagePriority {
  // Lowest priority.
  LOWEST = 0;
  // Low priority.
  LOW = 1;
  // Normal priority.
  NORMAL = 2;
  // High priority.
  // Sets the HiPriority flag in the LoRaWAN Backend Interfaces XmitDataReq message.
  HIGH = 3;
  // Highest priority.
  // Sets the HiPriority flag in the LoRaWAN Backend Interfaces XmitDataReq message.
  HIGHEST = 4;
}

enum MessageDeliveryState {
  // The message has been accepted for forwarding or delivery.
  ACCEPTED = 0;
  // The message has been forwarded to another host for delivery.
  FORWARDED = 1;
  // The message has been delivered to the receiver.
  DELIVERED = 2;
  // The message has been processed by the receiver.
  PROCESSED = 3;
}

enum UplinkMessageProcessingError {
  UPLINK_UNKNOWN_ERROR = 0;
  // The message does not pass the routing policy.
  UPLINK_ROUTING_POLICY = 1;
  // A matching device could not be found.
  // For join-request messages, this can be caused by the device not being registered or an already used DevNonce.
  // For data uplink messages, this can be caused by an unknown DevAddr or a MIC check failure.
  NOT_FOUND = 2;
  // The message is a duplicate of a previously received message.
  DUPLICATE_PAYLOAD = 5;
  // Internal error.
  UPLINK_INTERNAL = 3;
  // No Home Network endpoints found.
  NO_HOME_NETWORK_ENDPOINTS = 4;
}

enum DownlinkMessageProcessingError {
  DOWNLINK_UNKNOWN_ERROR = 0;
  // The packet was sent too late for transmission, i.e. the window closed.
  TOO_LATE = 1;
  // The packet was sent too early for transmission, i.e. the transmission time is too far in the future.
  TOO_EARLY = 2;
  // There was a collision with another packet.
  COLLISION_PACKET = 3;
  // There was a collision with the class B beacon.
  COLLISION_BEACON = 4;
  // Wrong frequency.
  TX_FREQUENCY = 5;
  // Wrong TX power.
  TX_POWER = 6;
  // No GPS lock while the transmission requires an absolute time.
  GPS_UNLOCKED = 7;
  // The message does not pass the routing policy.
  DOWNLINK_ROUTING_POLICY = 8;
  // Internal error.
  DOWNLINK_INTERNAL = 9;
  // Gateway not connected.
  GATEWAY_NOT_CONNECTED = 10;
}

enum TerrestrialAntennaPlacement {
  // Unknown antenna placement.
  UNKNOWN_PLACEMENT = 0;
  // Indoor antenna placement.
  INDOOR = 1;
  // Outdoor antenna placement.
  OUTDOOR = 2;
}

enum Modulation {
  // LoRa modulation.
  LORA = 0;
  // FSK modulation.
  FSK = 1;
}

enum Right {
  // Right to list networks and get network information.
  READ_NETWORK = 0;
  // Right to read contact information of networks.
  READ_NETWORK_CONTACT = 1;
  // Right to list Join Servers and get Join Server information.
  READ_JOIN_SERVER = 12;
  // Right to read contact information of Join Servers.
  READ_JOIN_SERVER_CONTACT = 13;

  // Right to list the route table.
  READ_ROUTE_TABLE = 5;
  // Right to read target authentication information.
  READ_TARGET_AUTH = 6;

  // Right to read and list routing policies.
  READ_ROUTING_POLICY = 4;
  // Right to write routing policies.
  WRITE_ROUTING_POLICY = 7;

  // Right to read and list gateway visibilities.
  READ_GATEWAY_VISIBILITY = 8;
  // Right to write gateway visibilities.
  WRITE_GATEWAY_VISIBILITY = 9;

  // Right to read traffic.
  READ_TRAFFIC = 10;
  // Right to write traffic.
  WRITE_TRAFFIC = 11;

  // Right to read reports.
  READ_REPORT = 14;

  reserved 2; // READ_TENANT
  reserved 3; // READ_TENANT_CONTACT
}

enum APIKeyState {
  // Requested.
  REQUESTED = 0;
  // Approved.
  APPROVED = 1;
  // Rejected.
  REJECTED = 2;
}

enum Protocol {
  // LoRaWAN Backend Interfaces (TS002) 1.0.
  TS002_V1_0 = 0;
  // LoRaWAN Backend Interfaces (TS002) 1.1.
  TS002_V1_1 = 1;
  // Packet Broker gRPC.
  GRPC = 2;
  // NATS Streaming Server.
  NATS_STREAMING_SERVER = 3;
}

enum RegionalParametersVersion {
  // LoRaWAN 1.0.
  TS001_V1_0 = 0;
  // LoRaWAN 1.0.1.
  TS001_V1_0_1 = 1;
  // LoRaWAN Regional Parameters 1.0.2.
  RP001_V1_0_2 = 2;
  // LoRaWAN Regional Parameters 1.0.2 revision B.
  RP001_V1_0_2_B = 3;
  // LoRaWAN Regional Parameters 1.0.3 revision A.
  RP001_V1_0_3_A = 4;
  // LoRaWAN Regional Parameters 1.1 revision A.
  RP001_V1_1_A = 5;
  // LoRaWAN Regional Parameters 1.1 revision B.
  RP001_V1_1_B = 6;
  // LoRaWAN Regional Parameters RP002-1.0.0.
  RP002_V1_0_0 = 7;
  // LoRaWAN Regional Parameters RP002-1.0.1.
  RP002_V1_0_1 = 8;
  // LoRaWAN Regional Parameters RP002-1.0.2.
  RP002_V1_0_2 = 9;
  // LoRaWAN Regional Parameters RP002-1.0.3.
  RP002_V1_0_3 = 10;
  // LoRaWAN Regional Parameters RP002-1.0.4.
  RP002_V1_0_4 = 11;
}

message RegionalParametersVersionValue {
  RegionalParametersVersion value = 1;
}
