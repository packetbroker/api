// Copyright Â© 2020 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package org.packetbroker.v3;

import "google/protobuf/empty.proto";
import "packetbroker/api/v3/mapping.proto";

option go_package = "go.packetbroker.org/api/v3;packetbroker";

message GetDefaultGatewayVisibilityRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 2;
}

message SetDefaultGatewayVisibilityRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 2;
  // New default Gateway Visibility.
  GatewayVisibility visibility = 3;
}

message GetHomeNetworkGatewayVisibilityRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 2;
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 3;
}

message SetHomeNetworkGatewayVisibilityRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 2;
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 3;
  // New Gateway Visibility for the Home Network Member.
  GatewayVisibility visibility = 4;
}

message GetGatewayVisibilityResponse {
  GatewayVisibility visibility = 1;
}

service GatewayVisibilityManager {
  // Get the Default Gateway Visibility.
  rpc GetDefaultVisibility(GetDefaultGatewayVisibilityRequest) returns (GetGatewayVisibilityResponse);
  // Set the Default Gateway Visibility.
  rpc SetDefaultVisibility(SetDefaultGatewayVisibilityRequest) returns (google.protobuf.Empty);
  // Get the Gateway Visibility with the Home Network.
  rpc GetHomeNetworkVisibility(GetHomeNetworkGatewayVisibilityRequest) returns (GetGatewayVisibilityResponse);
  // Set the Gateway Visibility with the Home Network.
  rpc SetHomeNetworkVisibility(SetHomeNetworkGatewayVisibilityRequest) returns (google.protobuf.Empty);
}

message UpdateForwarderGatewayRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 2;
  // Gateway to update.
  Gateway gateway = 3;
}

service ForwarderMapper {
  // Update a gateway.
  rpc UpdateGateway(UpdateForwarderGatewayRequest) returns (google.protobuf.Empty);
}

message ListHomeNetworkGatewaysRequest {
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 1;
  // Number of items to skip for pagination.
  uint32 offset = 2;
  // Limit number items for pagination.
  // If 0, use the server's default.
  uint32 limit = 3;
}

message ListGatewaysResponse {
  repeated Gateway gateways = 1;
  // Total number of items.
  uint32 total = 2;
}

message GetHomeNetworkGatewayRequest {
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 1;
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 2;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 3;
  // Unique identifier of the gateway.
  uint64 eui = 4;
}

message SubscribeHomeNetworkGatewaysRequest {
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 1;

  message ForwarderEUIs {
    // LoRa Alliance NetID of the Forwarder Member.
    uint32 forwarder_net_id = 1;
    // Forwarder cluster of the Forwarder Member.
    string forwarder_cluster_id = 2;
    // Set of unique identifiers of gateways.
    // Leave empty to subscribe to all gateways of the Forwarder Member.
    repeated uint64 euis = 3;
  }
  // Set of gateways to subscribe to.
  // Leave empty to subscribe to all gateways.
  repeated ForwarderEUIs gateways = 2;

  // Shared subscription group (optional).
  // Queue durability depends on the Mapper configuration.
  string group = 3;
}

service HomeNetworkMapper {
  // List gateways.
  // This rpc sets the total number of gateways in the x-total-count header.
  rpc ListGateways(ListHomeNetworkGatewaysRequest) returns (ListGatewaysResponse);
  // Get a gateway.
  rpc GetGateway(GetHomeNetworkGatewayRequest) returns (Gateway);
  // Subscribe to gateway updates.
  rpc SubscribeGateway(SubscribeHomeNetworkGatewaysRequest) returns (stream Gateway);
}
