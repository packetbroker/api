// Copyright Â© 2020 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package org.packetbroker.v3;

import "google/protobuf/empty.proto";
import "packetbroker/api/v3/enums.proto";
import "packetbroker/api/v3/messages.proto";
import "packetbroker/api/v3/networks.proto";
import "packetbroker/api/v3/routing.proto";

option go_package = "go.packetbroker.org/api/v3;packetbroker";

message ListTenantsRequest {
  // LoRa Alliance NetID of the Member.
  uint32 net_id = 1;
  // Number of items to skip for pagination.
  uint32 offset = 2;
  // Limit number items for pagination.
  // If 0, use the server's default.
  uint32 limit = 3;
}

message ListTenantsResponse {
  repeated Tenant tenants = 1;
  // Total number of items.
  uint32 total = 2;
}

message GetTenantRequest {
  // LoRa Alliance NetID of the Member.
  uint32 net_id = 1;
  // Tenant ID managed by the Member.
  string tenant_id = 2;
}

message GetTenantResponse {
  Tenant tenant = 1;
}

message SetTenantRequest {
  // New tenant to set.
  Tenant tenant = 1;
}

message DeleteTenantRequest {
  // LoRa Alliance NetID of the Member.
  uint32 net_id = 1;
  // Tenant ID managed by the Member.
  string tenant_id = 2;
}

service TenantManager {
  // List tenants.
  rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse);
  // Get tenant.
  rpc GetTenant(GetTenantRequest) returns (GetTenantResponse);
  // Set tenant.
  rpc SetTenant(SetTenantRequest) returns (google.protobuf.Empty);
  // Delete tenant.
  rpc DeleteTenant(DeleteTenantRequest) returns (google.protobuf.Empty);
}

message GetDefaultRoutingPolicyRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 2;
}

message ListHomeNetworkRoutingPoliciesRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 2;
  // Number of items to skip for pagination.
  uint32 offset = 3;
  // Limit number items for pagination.
  // If 0, use the server's default.
  uint32 limit = 4;
}

message ListHomeNetworkRoutingPoliciesResponse {
  repeated RoutingPolicy policies = 1;
  // Total number of items.
  uint32 total = 2;
}

message GetHomeNetworkRoutingPolicyRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 2;
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 3;
  // Tenant ID managed by the Home Network Member.
  string home_network_tenant_id = 4;
}

message SetRoutingPolicyRequest {
  RoutingPolicy policy = 3;
}

message GetRoutingPolicyResponse {
  RoutingPolicy policy = 1;
}

service RoutingPolicyManager {
  // Get the Default Routing Policy.
  rpc GetDefaultPolicy(GetDefaultRoutingPolicyRequest) returns (GetRoutingPolicyResponse);
  // Set the Default Routing Policy.
  rpc SetDefaultPolicy(SetRoutingPolicyRequest) returns (google.protobuf.Empty);
  // List the Routing Policies with Home Networks.
  rpc ListHomeNetworkPolicies(ListHomeNetworkRoutingPoliciesRequest) returns (ListHomeNetworkRoutingPoliciesResponse);
  // Get the Routing Policy with the Home Network.
  rpc GetHomeNetworkPolicy(GetHomeNetworkRoutingPolicyRequest) returns (GetRoutingPolicyResponse);
  // Set the Routing Policy with the Home Network.
  rpc SetHomeNetworkPolicy(SetRoutingPolicyRequest) returns (google.protobuf.Empty);
}

message PublishUplinkMessageRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 2;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 3;
  // Uplink message to publish.
  UplinkMessage message = 4;
}

message PublishUplinkMessageResponse {
  // Message identifier generated by the Router.
  string id = 1;
}

message PublishDownlinkMessageRequest {
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 1;
  // Tenant ID managed by the Home Network Member.
  string home_network_tenant_id = 2;
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 3;
  // Forwarder cluster of the Forwarder Member.
  // In LoRaWAN Class A downlink, this value must be copied from the RoutedUplinkMessage.
  // In LoRaWAN Class C downlink, this value is typically copied from a recent RoutedUplinkMessage.
  string forwarder_cluster_id = 4;
  // Tenant ID managed by the Forwarder Member.
  // In LoRaWAN Class A downlink, this value must be copied from the RoutedUplinkMessage.
  // In LoRaWAN Class C downlink, this value is typically copied from a recent RoutedUplinkMessage.
  string forwarder_tenant_id = 5;
  // Downlink message to publish.
  DownlinkMessage message = 6;
}

message PublishDownlinkMessageResponse {
  // Message identifier generated by the Router.
  string id = 1;
}

message SubscribeForwarderRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 2;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 3;
  // Shared subscription group (optional).
  // Queue durability depends on the Router configuration.
  string group = 4;
}

message SubscribeHomeNetworkRequest {
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 1;
  // Tenant ID managed by the Home Network Member.
  string home_network_tenant_id = 2;
  // Routing filters to configure the subscription.
  // A message gets delivered if any of the given filters pass.
  // If no filters are specified, all messages will be delivered.
  repeated RoutingFilter filters = 3;
  // Shared subscription group (optional).
  // Queue durability depends on the Router configuration.
  string group = 4;
}

service RouterForwarderData {
  // Publish an uplink message.
  rpc Publish(PublishUplinkMessageRequest) returns (PublishUplinkMessageResponse);
  // Subscribe to routed downlink messages.
  rpc Subscribe(SubscribeForwarderRequest) returns (stream RoutedDownlinkMessage);
}

service RouterHomeNetworkData {
  // Publish a downlink message.
  rpc Publish(PublishDownlinkMessageRequest) returns (PublishDownlinkMessageResponse);
  // Subscribe to routed uplink messages.
  rpc Subscribe(SubscribeHomeNetworkRequest) returns (stream RoutedUplinkMessage);
}

message RouteUplinkMessageRequest {
  // Uplink message to route.
  RoutedUplinkMessage message = 1;
}

message RouteDownlinkMessageRequest {
  // Downlink message to route.
  RoutedDownlinkMessage message = 1;
}

message RouteMessageResponse {
  // Delivery state of the message.
  MessageDeliveryState state = 1;
}

service RouterRouterData {
  // Route an uplink message.
  rpc RouteUplink(RouteUplinkMessageRequest) returns (RouteMessageResponse);
  // Route a downlink message.
  rpc RouteDownlink(RouteDownlinkMessageRequest) returns (RouteMessageResponse);
}
