// Copyright Â© 2020 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package org.packetbroker.routing.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "packetbroker/api/v3/enums.proto";
import "packetbroker/api/v3/messages.proto";
import "packetbroker/api/v3/routing.proto";

option go_package = "go.packetbroker.org/api/routing;routingpb";

message ListDefaultPoliciesRequest {
  // Timestamp to list from for pagination.
  google.protobuf.Timestamp updated_since = 1;
  // Limit number items for pagination.
  // If 0, use the server's default.
  uint32 limit = 2;
}

message ListDefaultPoliciesResponse {
  repeated org.packetbroker.v3.RoutingPolicy policies = 1;
  // Total number of items.
  uint32 total = 2;
}

message GetDefaultPolicyRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 2;
}

message ListHomeNetworkPoliciesRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 2;
  // Timestamp to list from for pagination.
  google.protobuf.Timestamp updated_since = 3;
  // Limit number items for pagination.
  // If 0, use the server's default.
  uint32 limit = 4;
}

message ListHomeNetworkPoliciesResponse {
  repeated org.packetbroker.v3.RoutingPolicy policies = 1;
  // Total number of items.
  uint32 total = 2;
}

message GetHomeNetworkPolicyRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 2;
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 3;
  // Tenant ID managed by the Home Network Member.
  string home_network_tenant_id = 4;
}

message SetPolicyRequest {
  org.packetbroker.v3.RoutingPolicy policy = 3;
}

message GetPolicyResponse {
  org.packetbroker.v3.RoutingPolicy policy = 1;
}

service PolicyManager {
  // List the Default Routing Policies.
  rpc ListDefaultPolicies(ListDefaultPoliciesRequest) returns (ListDefaultPoliciesResponse);
  // Get the Default Routing Policy.
  rpc GetDefaultPolicy(GetDefaultPolicyRequest) returns (GetPolicyResponse);
  // Set the Default Routing Policy.
  rpc SetDefaultPolicy(SetPolicyRequest) returns (google.protobuf.Empty);
  // List the Routing Policies with Home Networks.
  rpc ListHomeNetworkPolicies(ListHomeNetworkPoliciesRequest) returns (ListHomeNetworkPoliciesResponse);
  // Get the Routing Policy with the Home Network.
  rpc GetHomeNetworkPolicy(GetHomeNetworkPolicyRequest) returns (GetPolicyResponse);
  // Set the Routing Policy with the Home Network.
  rpc SetHomeNetworkPolicy(SetPolicyRequest) returns (google.protobuf.Empty);
}

message PublishUplinkMessageRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 2;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 3;
  // Uplink message to publish.
  org.packetbroker.v3.UplinkMessage message = 4;
}

message PublishUplinkMessageResponse {
  // Message identifier generated by the Router.
  string id = 1;
}

message PublishDownlinkMessageRequest {
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 1;
  // Tenant ID managed by the Home Network Member.
  string home_network_cluster_id = 2;
  // LoRa Alliance NetID of the Forwarder Member.
  string home_network_tenant_id = 3;
  // Home Network cluster of the Home Network Member.
  uint32 forwarder_net_id = 4;
  // Forwarder cluster of the Forwarder Member.
  // In LoRaWAN Class A downlink, this value must be copied from the RoutedUplinkMessage.
  // In LoRaWAN Class C downlink, this value is typically copied from a recent RoutedUplinkMessage.
  string forwarder_cluster_id = 5;
  // Tenant ID managed by the Forwarder Member.
  // In LoRaWAN Class A downlink, this value must be copied from the RoutedUplinkMessage.
  // In LoRaWAN Class C downlink, this value is typically copied from a recent RoutedUplinkMessage.
  string forwarder_tenant_id = 6;
  // Downlink message to publish.
  org.packetbroker.v3.DownlinkMessage message = 7;
}

message PublishDownlinkMessageResponse {
  // Message identifier generated by the Router.
  string id = 1;
}

message SubscribeForwarderRequest {
  // LoRa Alliance NetID of the Forwarder Member.
  uint32 forwarder_net_id = 1;
  // Forwarder cluster of the Forwarder Member.
  string forwarder_cluster_id = 2;
  // Tenant ID managed by the Forwarder Member.
  string forwarder_tenant_id = 3;
  // Shared subscription group (optional).
  // Queue durability depends on the Router configuration.
  string group = 4;
}

message SubscribeHomeNetworkRequest {
  // LoRa Alliance NetID of the Home Network Member.
  uint32 home_network_net_id = 1;
  // Home Network cluster of the Home Network Member.
  string home_network_cluster_id = 2;
  // Tenant ID managed by the Home Network Member.
  string home_network_tenant_id = 3;
  // Routing filters to configure the subscription.
  // A message gets delivered if any of the given filters pass.
  // If no filters are specified, all messages will be delivered.
  repeated org.packetbroker.v3.RoutingFilter filters = 4;
  // Shared subscription group (optional).
  // Queue durability depends on the Router configuration.
  string group = 5;
}

service ForwarderData {
  // Publish an uplink message.
  rpc Publish(PublishUplinkMessageRequest) returns (PublishUplinkMessageResponse);
  // Subscribe to routed downlink messages.
  rpc Subscribe(SubscribeForwarderRequest) returns (stream org.packetbroker.v3.RoutedDownlinkMessage);
}

service HomeNetworkData {
  // Publish a downlink message.
  rpc Publish(PublishDownlinkMessageRequest) returns (PublishDownlinkMessageResponse);
  // Subscribe to routed uplink messages.
  rpc Subscribe(SubscribeHomeNetworkRequest) returns (stream org.packetbroker.v3.RoutedUplinkMessage);
}

message RouteUplinkMessageRequest {
  // Uplink message to route.
  org.packetbroker.v3.RoutedUplinkMessage message = 1;
}

message RouteDownlinkMessageRequest {
  // Downlink message to route.
  org.packetbroker.v3.RoutedDownlinkMessage message = 1;
}

message RouteMessageResponse {
  // Delivery state of the message.
  org.packetbroker.v3.MessageDeliveryState state = 1;
}

service RouterData {
  // Route an uplink message.
  rpc RouteUplink(RouteUplinkMessageRequest) returns (RouteMessageResponse);
  // Route a downlink message.
  rpc RouteDownlink(RouteDownlinkMessageRequest) returns (RouteMessageResponse);
}

message ListRoutesRequest {
  uint32 limit = 1;
  google.protobuf.Timestamp created_since = 2;
}

message ListRoutesResponse {
  repeated org.packetbroker.v3.DevAddrPrefixRoute routes = 1;
  uint32 total = 2;
}

service Routes {
  // Returns the routes.
  rpc ListRoutes(ListRoutesRequest) returns (ListRoutesResponse);
}
